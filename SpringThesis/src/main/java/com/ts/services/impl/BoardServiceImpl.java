/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.ts.services.impl;

import com.ts.pojo.Board;
import com.ts.pojo.Student;
import com.ts.pojo.Thesis;
import com.ts.pojo.ThesisGrade;
import com.ts.repositories.BoardRepository;
import com.ts.repositories.StudentRepository;
import com.ts.repositories.ThesisGradeRepository;
import com.ts.repositories.ThesisRepository;
import com.ts.services.BoardService;
import com.ts.services.EmailService;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 *
 * @author Lenovo
 */
@Service
public class BoardServiceImpl implements BoardService {

    @Autowired
    private BoardRepository boardRepo;

    @Autowired
    private StudentRepository studentRepo;

    @Autowired
    private ThesisRepository thesisRepo;

    @Autowired
    private ThesisGradeRepository thesisGradeRepo;

    @Autowired
    private EmailService emailService;

    @Override
    public List<Board> getAllBoard() {
        return boardRepo.getAllBoard();
    }

    @Override
    public Board addBoard(Board board) {
        return boardRepo.addBoard(board);
    }

    @Override
    public Board updateBoard(int boardId, Map<String, String> params) {
        Board b = this.boardRepo.getBoardById(boardId);
        if (b == null) {
            throw new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y board c√≥ id = " + boardId);
        }
        String isLocked = params.get("isLocked").trim();
        if (isLocked.toUpperCase().trim().equals("TRUE")) {
            b.setIsLocked(Boolean.TRUE);
            // üîí Kh√≥a t·∫•t c·∫£ c√°c ƒë·ªÅ t√†i thu·ªôc h·ªôi ƒë·ªìng n√†y
            List<Thesis> theses = thesisRepo.getThesesByBoardId(boardId);
            for (Thesis t : theses) {
                t.setIsLocked(Boolean.TRUE);
                thesisRepo.addOrUpdate(t); // G·ªçi update ƒë·ªÉ l∆∞u l·∫°i
                // üîç T√¨m student thu·ªôc thesis n√†y
                Student student = studentRepo.getByThesisId(t.getThesisId());
                if (student != null && student.getUserId() != null) {
                    String email = student.getUserId().getEmail();

                    // üìä T√≠nh ƒëi·ªÉm trung b√¨nh t·ª´ thesis_grade
                    List<ThesisGrade> grades = thesisGradeRepo.getByThesisId(t.getThesisId());
                    double avg = grades.stream().mapToDouble(ThesisGrade::getScore).average().orElse(0.0);

                    // ‚úâÔ∏è G·ª≠i email th√¥ng b√°o ƒëi·ªÉm
                    String subject = "Th√¥ng b√°o ƒëi·ªÉm kho√° lu·∫≠n t·ªët nghi·ªáp";
                    String content = String.format("""
                    Xin ch√†o %s %s,

                    H·ªôi ƒë·ªìng ƒë√£ ho√†n t·∫•t ch·∫•m ƒëi·ªÉm ƒë·ªÅ t√†i: %s.
                    ƒêi·ªÉm trung b√¨nh c·ªßa b·∫°n l√†: %.2f

                    Tr√¢n tr·ªçng,
                    H·ªá th·ªëng qu·∫£n l√Ω kh√≥a lu·∫≠n.
                    """, student.getUserId().getFirstName(), student.getUserId().getLastName(),
                            t.getTitle(), avg
                    );

                    emailService.sendEmail(email, subject, content);
                }
            }
        }
        if (isLocked.toUpperCase().trim().equals("FALSE")) {
            b.setIsLocked(Boolean.FALSE);
            // üîí Kh√≥a t·∫•t c·∫£ c√°c ƒë·ªÅ t√†i thu·ªôc h·ªôi ƒë·ªìng n√†y
            List<Thesis> theses = thesisRepo.getThesesByBoardId(boardId);
            for (Thesis t : theses) {
                t.setIsLocked(Boolean.FALSE);
                thesisRepo.addOrUpdate(t); // G·ªçi update ƒë·ªÉ l∆∞u l·∫°i
            }
        }
        return this.boardRepo.updateBoard(b);
    }

    @Override
    public Board getBoardById(int boardId) {
        return boardRepo.getBoardById(boardId);
    }

}
